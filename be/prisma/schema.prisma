// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         Int       @id @default(autoincrement())
  first_name String
  last_name  String
  email      String    @unique
  department String
  created_at DateTime  @default(now())
  Address    Address[]
  Buyer      Buyer?
  Seller     Seller?
}

model Address {
  id             Int     @id @default(autoincrement())
  user           User    @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id        Int
  address_line_1 String
  address_line_2 String?
  city           String
  province       String
  postal_code    String
  recipient      String
  telephone      String
  prefered       Buyer?
}

model Buyer {
  user            User           @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  id              Int            @id @unique
  pref_address    Address        @relation(fields: [pref_address_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pref_address_id Int            @unique
  pref_pm         Payment_method @relation(fields: [pref_pm_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pref_pm_id      Int            @unique
  Orders          Order[]
  Cart            Cart_item[]
}

model Payment_method {
  id              Int      @id
  is_paypal       Boolean  @default(false)
  paypal_id       String?
  is_credit       Boolean? @default(true)
  bank_name       String?
  card_num        String?
  expirarion_date String?
  first_name      String?
  last_name       String?
  Buyer           Buyer?
}

model Seller {
  user        User     @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  id          Int      @id @unique
  bank_name   String
  account_num String
  Products    Product?
}

model Order {
  id          Int          @id
  buyer       Buyer        @relation(fields: [buyer_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  buyer_id    Int
  status      String
  date        DateTime     @default(now())
  order_items Order_item[]
}

model Shipping_status {
  id                     Int         @id
  status                 String
  expected_delivery_date String
  Order_items            Order_item?
}

model Order_item {
  order            Order           @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  order_id         Int             @unique
  product          Product         @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product_id       Int             @unique
  shippings_status Shipping_status @relation(fields: [shippings], references: [id], onUpdate: Cascade, onDelete: Cascade)
  shippings        Int             @unique
  quantity         Int

  @@id([order_id, product_id])
}

model Product {
  id                  Int                  @id
  seller              Seller               @relation(fields: [seller_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  seller_id           Int                  @unique
  name                String
  price               Float
  discount            Float
  description         String
  address             String
  status              String
  shipping_method     String
  created_at          DateTime             @default(now())
  updated_at          String
  total_quantity      Int
  category            Category             @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  category_id         Int                  @unique
  Order_items         Order_item?
  Shipping_constraInt Shipping_constraint?
  Product_multimedia  Product_multimedia[]
  Cart_items          Cart_item?
}

model Category {
  id      Int      @id
  name    String
  Product Product?
}

model Shipping_constraint {
  products   Product @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product_id Int     @unique
  region     String
  distance   Float
}

// multimedia(photos, videos)
model Product_multimedia {
  id         Int     @id
  url        String
  products   Product @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product_id Int     @unique
}

model Cart_item {
  buyer      Buyer   @relation(fields: [buyer_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  buyer_id   Int     @unique
  products   Product @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product_id Int     @unique
  quantity   Int

  @@id([buyer_id, product_id])
}

model Admin {
  id         Int    @id
  email      String
  first_name String
  last_name  String
  department String
  role       String
}
